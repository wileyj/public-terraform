#cloud-config

write_files:
  - path: /etc/modules-load.d/nf.conf
    owner: root
    permissions: 0644
    content: |
      nf_conntrack
  - path: /etc/sysctl.d/startup.conf
    owner: root
    permissions: 0644
    content: |
      net.ipv4.conf.all.route_localnet=1
      fs.file-max=2097152

      # for es
      vm.max_map_count=262144
      #Allow for more PIDs
      kernel.pid_max=65535

      # Restrict core dumps
      fs.suid_dumpable=0

      # Hide exposed kernel pointers
      kernel.kptr_restrict=1

      # Do less swapping
      vm.swappiness=30
      vm.dirty_ratio=30
      vm.dirty_background_ratio=5

      # 50% overcommitment of available memory
      vm.overcommit_ratio=50
      vm.overcommit_memory=0

      # Keep at least 64MB of free RAM space available
      vm.min_free_kbytes=65535


      #Prevent SYN attack
      net.ipv4.tcp_syncookies=1
      net.ipv4.tcp_syn_retries=2
      net.ipv4.tcp_synack_retries=2
      net.ipv4.tcp_max_syn_backlog=4096

      # Enable IP spoofing protection, turn on source route verification
      net.ipv4.conf.all.rp_filter=1
      net.ipv4.conf.default.rp_filter=1

      # Disable ICMP Redirect Acceptance
      net.ipv4.conf.all.accept_redirects=0
      net.ipv4.conf.default.accept_redirects=0
      net.ipv4.conf.all.secure_redirects=0
      net.ipv4.conf.default.secure_redirects=0
      net.ipv6.conf.all.accept_redirects=0
      net.ipv6.conf.default.accept_redirects=0

      # Enable Log Spoofed Packets, Source Routed Packets, Redirect Packets
      net.ipv4.conf.all.log_martians=1
      net.ipv4.conf.default.log_martians=1

      # Decrease the time default value for tcp_fin_timeout connection
      net.ipv4.tcp_fin_timeout=7

      # Decrease the time default value for connections to keep alive
      net.ipv4.tcp_keepalive_time=300
      net.ipv4.tcp_keepalive_probes=5
      net.ipv4.tcp_keepalive_intvl=15

      # Don't relay bootp
      net.ipv4.conf.all.bootp_relay=0

      # Don't proxy arp for anyone
      net.ipv4.conf.all.proxy_arp=0

      # Turn on the tcp_timestamps, accurate timestamp make TCP congestion control algorithms work better
      net.ipv4.tcp_timestamps=1

      # Don't ignore directed pings
      net.ipv4.icmp_echo_ignore_all=0

      # Enable ignoring broadcasts request
      net.ipv4.icmp_echo_ignore_broadcasts=1

      # Enable bad error message Protection
      net.ipv4.icmp_ignore_bogus_error_responses=1

      # Enable a fix for RFC1337 - time-wait assassination hazards in TCP
      net.ipv4.tcp_rfc1337=1

      # For servers with tcp-heavy workloads, enable 'fq' queue management scheduler (kernel > 3.12)
      net.core.default_qdisc=fq

      # Turn on the tcp_window_scaling
      net.ipv4.tcp_window_scaling=1

      # Increase the read-buffer space allocatable
      net.ipv4.tcp_rmem=8192 87380 16777216
      net.ipv4.udp_rmem_min=16384
      net.core.rmem_default=262144
      net.core.rmem_max=16777216

      # Increase the write-buffer-space allocatable
      net.ipv4.tcp_wmem=8192 65536 16777216
      net.ipv4.udp_wmem_min=16384
      net.core.wmem_default=262144
      net.core.wmem_max=16777216

      # Increase number of incoming connections
      net.core.somaxconn=32768

      # Increase number of incoming connections backlog
      net.core.netdev_max_backlog=16384
      net.core.dev_weight=64

      # Increase the maximum amount of option memory buffers
      net.core.optmem_max=65535

      # Increase the tcp-time-wait buckets pool size to prevent simple DOS attacks
      net.ipv4.tcp_max_tw_buckets=1440000

      # try to reuse time-wait connections, but don't recycle them (recycle can break clients behind NAT)
      net.ipv4.tcp_tw_recycle=0
      net.ipv4.tcp_tw_reuse=1

      # Limit number of orphans, each orphan can eat up to 16M (max wmem) of unswappable memory
      net.ipv4.tcp_max_orphans=16384
      net.ipv4.tcp_orphan_retries=0

      # don't cache ssthresh from previous connection
      net.ipv4.tcp_no_metrics_save=1
      net.ipv4.tcp_moderate_rcvbuf=1

      # Increase size of RPC datagram queue length
      net.unix.max_dgram_qlen=50

      # Don't allow the arp table to become bigger than this
      net.ipv4.neigh.default.gc_thresh3=2048

      # Tell the gc when to become aggressive with arp table cleaning.
      # Adjust this based on size of the LAN. 1024 is suitable for most /24 networks
      net.ipv4.neigh.default.gc_thresh2=1024

      # Adjust where the gc will leave arp table alone - set to 32.
      net.ipv4.neigh.default.gc_thresh1=32

      # Adjust to arp table gc to clean-up more often
      net.ipv4.neigh.default.gc_interval=30

      # Increase TCP queue length
      net.ipv4.neigh.default.proxy_qlen=96
      net.ipv4.neigh.default.unres_qlen=6

      # Enable Explicit Congestion Notification (RFC 3168), disable it if it doesn't work for you
      net.ipv4.tcp_ecn=1
      net.ipv4.tcp_reordering=3

      # How many times to retry killing an alive TCP connection
      net.ipv4.tcp_retries2=15
      net.ipv4.tcp_retries1=3

      # Avoid falling back to slow start after a connection goes idle
      # keeps our cwnd large with the keep alive connections (kernel > 3.6)
      net.ipv4.tcp_slow_start_after_idle=0

      # Allow the TCP fastopen flag to be used, beware some firewalls do not like TFO! (kernel > 3.7)
      net.ipv4.tcp_fastopen=3

      # This will enusre that immediatly subsequent connections use the new values
      net.ipv4.route.flush=1
      net.ipv6.route.flush=1
  - path: /etc/ecs/ecs.config
    owner: root
    permissions: 0644
    content: |
      ECS_CLUSTER=${ecs_cluster_name}
      ECS_ENABLE_TASK_IAM_ROLE=true
      ECS_LOGLEVEL=warn
      ECS_ENGINE_AUTH_TYPE=dockercfg
      ECS_ENGINE_AUTH_DATA={"https://index.docker.io/v1/":{"auth":"${docker_auth_key}","email":"${docker_auth_id}"},"quay.io":{"auth":"${quay_auth_key}","email":"${quay_auth_id}"}}
      ECS_AVAILABLE_LOGGING_DRIVERS=["json-file","syslog","journald","gelf","fluentd","awslogs"]
      ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=15m
      ECS_IMAGE_CLEANUP_INTERVAL=10m
  - path: /var/lib/iptables/rules-save
    permissions: 0644
    owner: root
    content: |
      *nat
      :PREROUTING ACCEPT [449:36308]
      :INPUT ACCEPT [12:720]
      :OUTPUT ACCEPT [9062:551275]
      :POSTROUTING ACCEPT [9062:551275]
      :DOCKER - [0:0]
      -A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
      -A PREROUTING -d 169.254.170.2/32 -p tcp -m tcp --dport 80 -j DNAT --to-destination 127.0.0.1:51679
      -A OUTPUT -d 169.254.170.2/32 -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 51679
      COMMIT
  - path: /root/.dockercfg
    permissions: 0640
    owner: root
    content: |
      {
        "https://index.docker.io/v1/": {
          "auth": "${docker_auth_key}",
          "email": "${docker_auth_id}"
        },
        "quay.io": {
          "auth": "${quay_auth_key}",
          "email": "${quay_auth_id}"
        }
      }
  - path: /opt/bin/docker-enter
    permissions: 0755
    owner: root
    content: |
      #!/bin/bash
      all_containers="$(docker ps | rev | awk '{print $1}' | rev | grep -v NAMES)"
      if [[ $# -ne 1 ]] ; then
        echo "ERROR: wrong amount of arguments"
        echo "USAGE: $0 <container-name>"
        echo "List of Currently Running Containers"
        echo $${all_containers} | tr ' ' '\n'
        exit 1
      fi
      container="$1"
      matches="$(echo $${all_containers} | tr ' ' '\n' | grep $${container} | wc -l)"
      if [[ $${matches} -gt 1 ]] ; then
        echo "ERROR: too many matches"
        echo $${all_containers} | tr ' ' '\n' | grep $${container}
        exit 1
      elif [[ $${matches} -lt 1 ]] ; then
        echo "ERROR: not enough matches"
        echo "List of Currently Running Containers"
        echo $${all_containers} | tr ' ' '\n'
        exit 1
      else
        container="$(echo $${all_containers} | tr ' ' '\n' | grep $${container})"
        echo "ENTERING CONTAINER: $${container}"
        docker exec -ti $${container} bash -l
        exit 0
      fi
  - path: /etc/motd.d/motd.conf
    owner: root
    permissions: 0644
    content:
      "\n
      This system is made available to authorized Employees only.\n
      Unauthorized access, attempts to defeat or circumvent security features,\n
      to use the system for other than intended purposes, to deny service to\n
      authorized users, or otherwise to interfere with the system or its operation\n
      is strictly prohibited. Evidence of such acts will be disclosed to law\n
      enforcement authorities and may result in criminal prosecution.\n
      If you are not an authorized employee please logout immediately.\n
      \n\n"
  - path: /tmp/update_etcd.sh
    owner: root
    permissions: 0755
    content: |
      #!/bin/bash
      IP=`ip -o -f inet addr show eth0 | awk '/scope global/ {print $4}'`
      RANGE=`echo $$IP | cut -f1-2 -d "."`
      /usr/bin/etcdctl set /coreos.com/network/config "{ \"Network\": \"$${RANGE}.0.0/16\", \"Backend\": {\"Type\": \"vxlan\"}}"
  - path: /tmp/update_docker_opts.sh
    owner: root
    permissions: 0755
    content: |
      #!/bin/sh
      MAC_ADDR=`curl -s http://169.254.169.254/latest/meta-data/mac`
      CIDR_FULL=`curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$${MAC_ADDR}/vpc-ipv4-cidr-block`
      CIDR_BASE=`echo $${CIDR_FULL} | cut -d/ -f1 | cut -d\. -f1-3`
      LAST_OCTET=`echo $${CIDR_FULL} | cut -d/ -f1 | cut -d\. -f4`
      DNS_OCTET=`expr $${LAST_OCTET} + 2`
      DNS_IP="$${CIDR_BASE}.$${DNS_OCTET}"
      if [ ! -d "/etc/docker" ]; then
        mkdir /etc/docker
      fi
      cat <<EOF> /etc/docker/daemon.json
      {
        "dns": [
          "$${DNS_IP}",
          "8.8.8.8",
          "8.8.4.4"
        ]
      }
      EOF
coreos:
  update:
    reboot-strategy: off
  units:
    - name: systemd-sysctl.service
      enable: true
      command: restart
    - name: iptables-restore.service
      enable: true
      command: start
    - name: etcd-member.service
      enable: true
      command: start
      drop-ins:
        - name: 40-etcd-cluster.conf
          content: |
            [Service]
            Environment="ETCD_IMAGE_TAG=v3.1.8"
            Environment="ETCD_NAME=etcd0"
            Environment="ETCD_ADVERTISE_CLIENT_URLS=http://$$private_ipv4:2379"
            Environment="ETCD_INITIAL_ADVERTISE_PEER_URLS=http://$$private_ipv4:2380"
            Environment="ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379"
            Environment="ETCD_LISTEN_PEER_URLS=http://$$private_ipv4:2380"
    - name: docker.socket
      enable: true
      command: start
    - name: docker.service
      command: start
      drop-ins:
        - name: 50-docker-options.conf
          content: |
            [Service]
            ExecStartPre=/bin/sh /tmp/update_docker_opts.sh
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            ExecStartPre=/bin/sh /tmp/update_etcd.sh
    # - name: systemd-networkd.service
    #   enable: true
    #   command: restart
    - name: amazon-ecs-agent.service
      command: start
      runtime: true
      content: |
        [Unit]
        Description=Amazon ECS Agent
        After=docker.service
        Requires=docker.service
        Requires=flanneld.service
        After=flanneld.service
        After=etcd.service
        [Service]
        Restart=always
        EnvironmentFile=/etc/ecs/ecs.config
        ExecStartPre=-/usr/bin/docker kill ecs-agent
        ExecStartPre=-/usr/bin/docker rm ecs-agent
        ExecStartPre=/usr/bin/docker pull amazon/amazon-ecs-agent
        ExecStart=/usr/bin/docker run \
          --name ecs-agent \
          --restart=on-failure:10 \
          --net=host \
          --env-file /etc/ecs/ecs.config \
          --env=ECS_LOGFILE=/log/ecs-agent.log \
          --env=ECS_DATADIR=/data \
          --env=ECS_AGENT_CONFIG_FILE_PATH=/etc/ecs/ecs.config.json \
          --env=ECS_UPDATE_DOWNLOAD_DIR=/var/cache/ecs \
          --publish=127.0.0.1:51678:51678 \
          --volume=/var/run/docker.sock:/var/run/docker.sock \
          --volume=/var/lib/ecs/data:/data \
          --volume=/etc/ecs:/etc/ecs \
          --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro \
          --volume=/var/run/docker/execdriver/native:/var/lib/docker/execdriver/native:ro \
          --volume=/var/log/ecs:/log \
          --volume=/var/cache/ecs:/var/cache/ecs \
          amazon/amazon-ecs-agent
        ExecStop=/usr/bin/docker stop ecs-agent
    - name: registrator.service
      command: start
      content: |
        [Unit]
        Description=registrator
        After=docker.service
        After=amazon-ecs-agent.service
        After=etcd.service
        Requires=docker.service
        Requires=amazon-ecs-agent.service
        After=flanneld.service
        [Service]
        TimeoutStartSec=0
        EnvironmentFile=/etc/environment
        ExecStartPre=-/usr/bin/docker kill registrator
        ExecStartPre=-/usr/bin/docker rm registrator
        ExecStartPre=/usr/bin/docker pull ${registrator_image}
        ExecStart=/usr/bin/docker run \
          --net=host \
          --name registrator \
          -v /var/run/docker.sock:/tmp/docker.sock \
          -h $private_ipv4 \
          ${registrator_image} \
          -ttl 120 \
          -ttl-refresh 30 \
          -ip $private_ipv4 \
          "etcd://localhost:2379/registrator"
        ExecStop=/usr/bin/docker stop registrator
    - name: set-hostname.service
      command: start
      content: |
        [Unit]
        Description=Set the hostname for this server
        [Service]
        EnvironmentFile=/etc/ecs/ecs.config
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/bin/sh -c "/usr/bin/hostnamectl set-hostname ${ecs_host_name}-`echo %m | head -c6`-`curl http://169.254.169.254/latest/meta-data/instance-id`"
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Socket for the API
        [Socket]
        ListenStream=2375
        Service=docker.service
        BindIPv6Only=both
        [Install]
        WantedBy=sockets.target
    - name: format-log.service
      command: start
      content: |
        [Unit]
        Description=Formats the log drive
        After=dev-xvdf.device
        Requires=dev-xvdf.device
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/xvdf
        ExecStart=/usr/sbin/mkfs.xfs -f /dev/xvdf
    - name: srv-log.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /srv/log
        Requires=format-log.service
        After=format-log.service
        Before=docker.service
        [Mount]
        What=/dev/xvdf
        Where=/srv/log
        Type=xfs
    - name: srv-log.service
      command: start
      content: |
        [Unit]
        Description=sets permissions of /srv/log
        After=data.mount
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/mkdir -p /srv/log/elasticsearch
        ExecStart=/usr/bin/chmod -R 777 /srv/log
